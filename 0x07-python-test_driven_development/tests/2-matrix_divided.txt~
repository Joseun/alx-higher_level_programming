===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Numbers
=======

``matrix_divided()`` returns a new matrix with all elements of the matrix
divided by div, rounded to 2 decimal places.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[15, 25, 20], [50, 40, 55]], 5)
    [[3.0, 5.0, 4.0], [10.0, 8.0, 11.0]]

It also works with floating-point values.

::

    >>> matrix_divided([[2.5, 3.5, 4.5], [5.5, 0.5, 0.025]], 5)
    [[0.5, 0.7, 0.9], [1.1, 0.1, 0.05]]

Non-Numbers
===========

``matrix_divided()`` raises a TypeError if the list in the matrix contains a
string or if div is not an integer or float. It also raises a ZeroDivisionError
if div is 0. If the length of the lists in the matrix are not of equal lengths,
a TypeError is raised.

::

    >>> matrix_divided([[15, 25, 20], [50, 40, 55]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[15, 25, 20], [50, 40, 55]], "we")
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[15, 25, 20], [50, 40, "w"]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[15, 25, 20], [50, 40, 10, 55]], 5)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
